import os
import re
from dataclasses import asdict
from typing import Dict, Any
from config import DATA_DIR
from controller.schemas.student_email import StudentEmail
from controller.data_manager import student_email_data_client, student_data_client, reference_data_client , email_to_student
from controller.shared_pool import shared_message_pool
from models import writer_model, reader_model, checker_mddel

def read_email_from_file(file_path: str) -> str:
    """Reads the email content from a file."""
    try:
        with open(file_path, "r", encoding="utf-8") as file: 
            print("Step 1: Email content successfully read from file.")
            return file.read()
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
        raise


def generate_email_reply() -> str:
    """Generates a reply to the email using the reader model."""
    example_email = shared_message_pool.get('original_email')
    print("Step 2: Generating reply using the reader model...")
    reply = reader_model.generate_reply(example_email)
    if reply is None:
        print("No reply generated by the reader model.")
        return ""
    print("Step 2: Reply successfully generated.")
    return re.sub(r"```json|```", "", reply).strip()


def process_student_email() -> Dict[str, Any]:
    """Processes the email into the student database and returns the student data."""
    print("Step 3: Processing student email and storing into database...")
    reader_reply = shared_message_pool.get('tmp_reply')
    email_id = student_email_data_client.insert_from_json(reader_reply)
    email_dict = student_email_data_client.find(email_id)
    student_email = StudentEmail(**email_dict)
    student_dict = asdict(email_to_student(student_email))
    student_data_client.insert(student_dict)
    print("Step 3: Student email successfully processed and stored.")
    return student_dict


def generate_writer_reply() -> str:
    """Generates a writer's reply based on the student's data and the checker's suggestions."""
    print("Step 4: Generating writer's reply based on student data and checker feedback...")
    student_data = shared_message_pool.get('student_data')
    checker_reply = shared_message_pool.get('checker_reply')
    reference=shared_message_pool.get('reference')
    pre_prompt = f"Student Information: {student_data}\nChecker Feedback: {checker_reply}\nReference: {reference}\n"
    print("-------------------")
    print("pre_prompt:\n",pre_prompt)
    print("-------------------")
    reply = writer_model.generate_reply(pre_prompt)
    print("Step 4: Writer's reply successfully generated.")
    return reply if reply is not None else ""


def generate_checker_reply() -> str:
    """Generates a checker's reply based on the writer's reply."""
    writer_reply = shared_message_pool.get('writer_reply')
    reference=shared_message_pool.get('reference')
    
    if not writer_reply:
        print("Error: Writer's reply is missing or invalid.")
        return ""  
    
    print("Step 5: Generating checker's reply based on writer's reply...")
    pre_prompt=f"Writer_reply:${writer_reply}\nReference:${reference}\n"
    print("-------------------")
    print("pre_prompt:\n",pre_prompt)
    print("-------------------")
    checker_reply = checker_mddel.generate_reply(pre_prompt)
    
    if checker_reply is None:
        print("Error: No checker reply generated.")
        return ""
    
    print("Step 5: Checker reply successfully generated.")
    return checker_reply


def main():
    email_path = os.path.join(DATA_DIR, "mails/example.txt")
    max_iterations = 5
    iteration = 0
    reference=reference_data_client.find_all()
    shared_message_pool.add('reference', reference)
    print(reference)
    while iteration < max_iterations:
        try:
            iteration += 1
            print(f"--- Iteration {iteration} ---")

            # Step 1: 读取邮件内容并存入共享池
            example_email = read_email_from_file(email_path)
            shared_message_pool.add('original_email', example_email)

            # Step 2: 使用 Reader 模型生成初步回复
            reader_reply = generate_email_reply()
            shared_message_pool.add('tmp_reply', reader_reply)

            # Step 3: 处理邮件并存入学生数据库
            student_data = process_student_email()
            shared_message_pool.add('student_data', student_data)

            # Step 4: 使用 Checker 模型检查草稿
            checker_reply = generate_checker_reply()
            shared_message_pool.add('checker_reply', checker_reply)

            # Step 5: 使用 Writer 模型生成草稿，结合学生信息和检查者建议
            writer_reply = generate_writer_reply()
            shared_message_pool.add('writer_reply', writer_reply)
            print(f"Writer reply: {writer_reply}")

            # Step 6: 使用 Checker 模型检查最终草稿
            checker_reply = generate_checker_reply()
            shared_message_pool.add('final_checker_reply', checker_reply)

            print(f"Checker reply: {checker_reply}")
        except Exception as e:
            print(f"Error in processing: {e}")
            break

    print("Max iterations reached. Exiting...")


if __name__ == "__main__":
    main()
